#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
WebBoost Martinique - API Backend pour 02switch
Chatbot : √âlise (OpenAI direct)
H√©bergement : 02switch
"""

import os
import sys
import json
import uuid
from datetime import datetime, timezone
from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import JSONResponse
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel, EmailStr, Field
from typing import Optional, List
from dotenv import load_dotenv

# Chargement variables environnement
load_dotenv()

# Importation emergentintegrations
try:
    from emergentintegrations.llm.chat import LlmChat, UserMessage
    EMERGENT_AVAILABLE = True
except ImportError:
    EMERGENT_AVAILABLE = False
    print("Warning: emergentintegrations not available - using fallback mode")

# FastAPI app
app = FastAPI(
    title="WebBoost Martinique API",
    description="API pour chatbot √âlise et services WebBoost",
    version="2.0.0"
)

# CORS pour 02switch
app.add_middleware(
    CORSMiddleware,
    allow_origins=["https://weboostmartinique.com", "https://www.weboostmartinique.com", "http://localhost:3000"],
    allow_credentials=True,
    allow_methods=["GET", "POST", "OPTIONS"],
    allow_headers=["*"],
)

# Models Pydantic
class ChatRequest(BaseModel):
    message: str
    session_id: Optional[str] = None
    model: Optional[str] = "gpt-4o-mini"

class ContactRequest(BaseModel):
    nom: str = Field(..., min_length=2, max_length=100)
    email: EmailStr
    telephone: str = Field(..., min_length=10, max_length=20)
    entreprise: Optional[str] = Field(None, max_length=100)
    message: str = Field(..., min_length=10, max_length=2000)
    pack: Optional[str] = None
    consent: bool = Field(True, description="Consentement RGPD")

class OrderRequest(BaseModel):
    pack: str
    options: List[str] = []
    customer_info: dict
    total: float
    deposit: float
    order_number: str

# Personnalit√© √âlise pour OpenAI
ELISE_PERSONA = """Tu es √âlise Morel, conseill√®re commerciale de WebBoost Martinique. Tu es professionnelle mais chaleureuse, experte en cr√©ation de sites web pour TPE/PME martiniquaises.

PERSONNALIT√â √âLISE :
- Conseill√®re commerciale experte (3 ans d'exp√©rience)
- Connaissance parfaite du march√© martiniquais  
- Approche consultative et bienveillante
- Sp√©cialiste conversion digitale TPE/PME
- Utilise des emojis avec mod√©ration pour humaniser

SERVICES WEBBOOST MARTINIQUE :
- Pack Essentiel (890‚Ç¨ HT) : 3 pages, SEO base, mobile-first, 1 r√©vision, d√©lai 10j, acompte 445‚Ç¨
- Pack Pro (1290‚Ç¨ HT) : 5-6 pages, SEO √©tendu, LCP<2.5s, GA4, 2 r√©visions, d√©lai 7-10j, acompte 645‚Ç¨ [LE PLUS POPULAIRE]
- Pack Premium (1790‚Ç¨ HT) : 6-8 pages + conversion, tracking avanc√©, formation 45min, d√©lai 10-12j, acompte 895‚Ç¨

MODALIT√âS :
- Paiement √©chelonn√© : 50% commande / 40% avant mise en ligne / 10% livraison
- D√©lais WebBoost : 7-12 jours (vs 4-8 semaines concurrence)
- Garanties : Satisfait ou rembours√© 15j, d√©lai respect√© ou rembours√©
- Support : 7j/7 pendant le projet, r√©visions incluses selon pack

CONTEXTE MARTINIQUE :
74% de la population martiniquaise est en difficult√© avec le num√©rique (vs 33% en m√©tropole).
WebBoost accompagne sp√©cifiquement les entrepreneurs locaux avec tarifs adapt√©s et approche p√©dagogique.

TON R√îLE COMMERCIAL :
1. Accueillir chaleureusement et te pr√©senter
2. D√©couvrir le secteur d'activit√© (restaurant, commerce, services, sant√©, beaut√©, artisan)
3. Comprendre les besoins, objectifs et situation actuelle  
4. Recommander le pack le mieux adapt√© avec justification claire
5. G√©rer les objections (prix = comparaison concurrence, d√©lais = notre rapidit√©, s√©curit√© = garanties)
6. Guider vers la commande en ligne ou contact direct Kenneson pour urgence
7. Toujours demander les coordonn√©es pour devis personnalis√©

EXEMPLES R√âPONSES PAR SECTEUR :
- Restaurant : Pack Pro recommand√© (galerie photos plats, r√©servation en ligne, SEO "restaurant [ville]")
- Commerce : Pack Essentiel ou Pro selon ambition (catalogue produits, optimisation locale)
- Services B2B : Pack Pro/Premium (pages services, formulaires devis, t√©moignages clients)

R√©ponds naturellement en fran√ßais, sois consultative mais guide vers la vente. Mentionne les acomptes (50%) pour rassurer sur l'investissement initial."""

# Routes API
@app.get("/")
async def root():
    return {"message": "WebBoost Martinique API - √âlise Chatbot OpenAI", "status": "active", "version": "2.0"}

@app.get("/api/health")
async def health():
    """Health check pour monitoring"""
    return {
        "status": "healthy",
        "timestamp": datetime.now(timezone.utc).isoformat(),
        "service": "WebBoost API",
        "chatbot": "√âlise OpenAI",
        "emergent_available": EMERGENT_AVAILABLE
    }

@app.post("/api/chat-openai")
async def chat_with_elise(request: ChatRequest):
    """Chat avec √âlise - OpenAI direct (pas de configuration utilisateur)"""
    try:
        user_message = request.message
        session_id = request.session_id or str(uuid.uuid4())
        
        # Essayer OpenAI avec emergentintegrations
        if EMERGENT_AVAILABLE:
            try:
                # R√©cup√©rer la cl√© (Emergent ou OpenAI selon config)
                openai_key = os.getenv("OPENAI_API_KEY", "")
                emergent_key = os.getenv("EMERGENT_LLM_KEY", "")
                
                # Utiliser OpenAI si cl√© configur√©e, sinon Emergent
                if openai_key and openai_key != "sk-votre-cle-openai-ici":
                    chat = LlmChat(
                        api_key=openai_key,
                        session_id=session_id,
                        system_message=ELISE_PERSONA
                    ).with_model("openai", request.model)
                    provider = "openai_direct"
                elif emergent_key:
                    chat = LlmChat(
                        api_key=emergent_key,
                        session_id=session_id,
                        system_message=ELISE_PERSONA
                    ).with_model("openai", request.model)
                    provider = "emergent_openai"
                else:
                    raise Exception("No API key configured")
                
                user_msg = UserMessage(text=user_message)
                elise_response = await chat.send_message(user_msg)
                
                # Sauvegarder conversation (localStorage c√¥t√© client)
                return JSONResponse({
                    "reply": elise_response,
                    "model": request.model,
                    "provider": provider,
                    "personality": "elise",
                    "session_id": session_id,
                    "timestamp": datetime.now(timezone.utc).isoformat(),
                    "success": True
                })
                
            except Exception as e:
                print(f"AI Error: {e}")
                # Fallback vers √âlise locale
                fallback_response = get_elise_local_response(user_message)
                return JSONResponse({
                    "reply": fallback_response,
                    "model": "fallback",
                    "provider": "elise_local",
                    "personality": "elise",
                    "session_id": session_id,
                    "timestamp": datetime.now(timezone.utc).isoformat(),
                    "success": True
                })
        else:
            # Mode fallback uniquement
            fallback_response = get_elise_local_response(user_message)
            return JSONResponse({
                "reply": fallback_response,
                "model": "fallback",
                "provider": "elise_local", 
                "personality": "elise",
                "session_id": session_id,
                "timestamp": datetime.now(timezone.utc).isoformat(),
                "success": True
            })
            
    except Exception as e:
        print(f"Chat Error: {e}")
        return JSONResponse({
            "reply": "D√©sol√©e, je rencontre un petit souci technique. Pouvez-vous r√©essayer ou me contacter directement au WhatsApp ? üì±",
            "error": str(e),
            "success": False
        }, status_code=500)

def get_elise_local_response(message):
    """R√©ponses √âlise intelligentes en mode local"""
    text = message.lower()
    
    # Salutations
    if any(word in text for word in ['bonjour', 'salut', 'hello', 'bonsoir', 'coucou']):
        return """Bonjour ! üòä Je suis √âlise, votre conseill√®re commerciale WebBoost Martinique.

Je suis sp√©cialis√©e dans l'accompagnement des entreprises martiniquaises pour leur transformation digitale.

**Mes domaines d'expertise :**
üéØ Conversion digitale TPE/PME
üá≤üá∂ March√© martiniquais  
üì± Sites mobiles performants
üí∞ Optimisation ROI web

Comment puis-je vous aider avec votre projet web aujourd'hui ?"""

    # Prix/Tarifs  
    if any(word in text for word in ['prix', 'tarif', 'co√ªt', 'combien', 'budget']):
        return """üí∞ **Excellente question ! Nos tarifs sont sp√©cialement adapt√©s au march√© martiniquais :**

**Pack Essentiel** - 890‚Ç¨ HT
‚Ä¢ 3 pages professionnelles + SEO base
‚Ä¢ Acompte : 445‚Ç¨ seulement
‚Ä¢ D√©lai : 10 jours max

**Pack Pro** - 1 290‚Ç¨ HT ‚≠ê (Le plus populaire)
‚Ä¢ 5-6 pages + SEO √©tendu + GA4  
‚Ä¢ Acompte : 645‚Ç¨ seulement
‚Ä¢ D√©lai : 7-10 jours max

**Pack Premium** - 1 790‚Ç¨ HT
‚Ä¢ 6-8 pages + conversion + formation
‚Ä¢ Acompte : 895‚Ç¨ seulement  
‚Ä¢ D√©lai : 10-12 jours max

**Paiement √©chelonn√© 50/40/10 - Pour quel secteur d'activit√© ?**"""

    # Secteur Restaurant
    if any(word in text for word in ['restaurant', 'resto', 'cuisine', 'plat']):
        return """üçΩÔ∏è **Parfait ! Les restaurants sont ma sp√©cialit√© !**

Pour votre restaurant, je recommande fortement le **Pack Pro** (1 290‚Ç¨ HT) car il inclut :

‚ú® **Galerie photos optimis√©e** - Mettez vos plats en valeur
üì± **Syst√®me de r√©servation** - Plus de clients le soir
üá≤üá∂ **SEO local renforc√©** - Appara√Ætre dans "restaurant [votre ville]"
‚≠ê **Gestion avis Google** - E-r√©putation contr√¥l√©e

**Acompte : seulement 645‚Ç¨ pour commencer**

Avez-vous d√©j√† un site web actuellement ? Combien de couverts faites-vous ?"""

    # Secteur Commerce
    if any(word in text for word in ['commerce', 'boutique', 'magasin', 'vente']):
        return """üõçÔ∏è **Excellent ! Le commerce local, c'est mon domaine !**

Selon votre ambition, 2 options parfaites :

**Pack Essentiel** (890‚Ç¨ HT) - Boutique physique etablie
‚Ä¢ Site vitrine √©l√©gant + informations pratiques
‚Ä¢ Acompte : 445‚Ç¨

**Pack Pro** (1 290‚Ç¨ HT) - D√©veloppement commercial  
‚Ä¢ Catalogue produits + SEO local renforc√©
‚Ä¢ Acompte : 645‚Ç¨

**Que vendez-vous exactement ?** (v√™tements, alimentaire, artisanat...)
Cela m'aidera √† personnaliser mes recommandations ! üòä"""

    # D√©lais
    if any(word in text for word in ['d√©lai', 'temps', 'rapidit√©', 'livraison', 'quand']):
        return """‚ö° **Notre signature : la rapidit√© martiniquaise !**

Contrairement √† la concurrence (6-8 semaines), nous livrons en **7 √† 12 jours ouvr√©s maximum**.

**Pourquoi si rapide ?**
‚úÖ √âquipe 100% locale (pas de d√©calage horaire)
‚úÖ Process optimis√© depuis 3 ans  
‚úÖ Communication directe WhatsApp/t√©l√©phone
‚úÖ Pas de sous-traitance √† l'√©tranger

**Vos d√©lais garantis :**
‚Ä¢ Pack Essentiel : 10 jours maximum
‚Ä¢ Pack Pro : 7-10 jours maximum
‚Ä¢ Pack Premium : 10-12 jours maximum

**Et c'est garanti !** D√©lai non respect√© = remboursement int√©gral. üõ°Ô∏è

Pour quel type d'entreprise est-ce ?"""

    # Urgence
    if any(word in text for word in ['urgent', 'vite', 'rapidement', 'asap', 'press√©']):
        return """üö® **Urgence parfaitement comprise !**

Pour un traitement express :
üì± **Kenneson en direct** - Contact dans l'heure  
‚ö° **D√©marrage imm√©diat** si brief complet
üéØ **Priorit√© absolue** sur planning

**Contact urgence :** https://wa.me/596000000

**Quelle est votre situation ?**
‚Ä¢ Lancement imminent ?
‚Ä¢ Concurrent agressif ?
‚Ä¢ Saison haute qui arrive ?

Je trouve la solution adapt√©e ! üí™"""

    # Garanties
    if any(word in text for word in ['garantie', 's√©curis√©', 'rembours√©', 'risque', 'confiance']):
        return """üõ°Ô∏è **Toutes mes garanties personnelles :**

‚úÖ **Satisfait ou rembours√©** - 15 jours complets
‚úÖ **D√©lai respect√© ou rembours√©** - Engagement ferme
‚úÖ **Paiement 100% s√©curis√©** - Stripe certifi√© SSL  
‚úÖ **Support 7j/7** pendant tout votre projet
‚úÖ **R√©visions incluses** selon votre pack
‚úÖ **Anti-bug gratuit** - 15 jours post-livraison

**En 3 ans : 0% de remboursement demand√© !** üèÜ

Qu'est-ce qui vous pr√©occupe le plus dans votre projet ?"""

    # Services/B2B
    if any(word in text for word in ['service', 'conseil', 'b2b', 'prestation']):
        return """üíº **Services B2B ! Excellent secteur pour la conversion !**

Les entreprises de services ont souvent les **meilleurs retours** avec nos sites :

üéØ **Pack Pro recommand√©** (1 290‚Ç¨ HT)
‚Ä¢ Pages services d√©taill√©es et optimis√©es
‚Ä¢ Formulaires de devis/contact avanc√©s  
‚Ä¢ T√©moignages clients int√©gr√©s
‚Ä¢ SEO "services [votre domaine] [votre ville]"

**Acompte : 645‚Ç¨ pour d√©marrer**

**Quel type de services proposez-vous ?** (conseil, maintenance, formation, expertise...)"""

    # G√©n√©ral/D√©couverte
    return """üòä **Merci de votre int√©r√™t pour WebBoost !**

Je suis √âlise, sp√©cialis√©e dans l'accompagnement des entrepreneurs martiniquais pour leur transformation digitale.

**Pour mieux vous conseiller de mani√®re personnalis√©e :**
‚Ä¢ Quel type d'entreprise dirigez-vous ?
‚Ä¢ Avez-vous un site web actuellement ?
‚Ä¢ Quel est votre objectif principal ?

**Mon r√¥le :** vous trouver LA solution parfaite selon votre situation unique ! üéØ

Par quoi souhaitez-vous commencer ?"""

@app.post("/api/contact")
async def contact_form(request: ContactRequest):
    """Traitement formulaire de contact"""
    try:
        # Validation donn√©es
        contact_data = {
            "id": str(uuid.uuid4()),
            "nom": request.nom,
            "email": request.email,
            "telephone": request.telephone,
            "entreprise": request.entreprise,
            "message": request.message,
            "pack": request.pack,
            "consent": request.consent,
            "created_at": datetime.now(timezone.utc).isoformat(),
            "source": "contact_form"
        }
        
        # TODO: Enregistrement en base de donn√©es MongoDB
        # TODO: Envoi email de confirmation
        
        # Sauvegarde locale pour l'instant
        print(f"Contact re√ßu: {contact_data}")
        
        return JSONResponse({
            "message": "Merci ! √âlise vous contactera sous 24h ouvr√©es.",
            "id": contact_data["id"],
            "status": "success"
        })
        
    except Exception as e:
        print(f"Contact Error: {e}")
        return JSONResponse({
            "message": "Erreur lors de l'envoi. Contactez-nous directement au 0696 XX XX XX",
            "error": str(e),
            "status": "error"
        }, status_code=500)

@app.post("/api/order")
async def create_order(request: OrderRequest):
    """Cr√©ation de commande"""
    try:
        order_data = {
            "order_number": request.order_number,
            "pack": request.pack,
            "options": request.options,
            "customer_info": request.customer_info,
            "total": request.total,
            "deposit": request.deposit,
            "status": "pending_payment",
            "created_at": datetime.now(timezone.utc).isoformat()
        }
        
        # TODO: Int√©gration Stripe pour paiement
        # TODO: Envoi email confirmation
        # TODO: Sauvegarde MongoDB
        
        print(f"Commande cr√©√©e: {order_data}")
        
        return JSONResponse({
            "message": "Commande cr√©√©e avec succ√®s",
            "order_number": request.order_number,
            "next_step": "payment",
            "status": "success"
        })
        
    except Exception as e:
        print(f"Order Error: {e}")
        return JSONResponse({
            "message": "Erreur lors de la cr√©ation de commande",
            "error": str(e),
            "status": "error"
        }, status_code=500)

@app.get("/api/kpi")
async def get_kpi():
    """Statistiques pour dashboard"""
    try:
        # TODO: Donn√©es r√©elles depuis MongoDB
        return JSONResponse({
            "total_conversations": 0,
            "total_contacts": 0,
            "total_orders": 0,
            "conversion_rate": 0.0,
            "timestamp": datetime.now(timezone.utc).isoformat()
        })
    except Exception as e:
        return JSONResponse({"error": str(e)}, status_code=500)

# Point d'entr√©e pour 02switch (CGI/WSGI)
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000, reload=False)