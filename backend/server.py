from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel, EmailStr, Field
from typing import Optional, List, Literal
import os
import uuid
import json
from pymongo import MongoClient
from datetime import datetime, timezone, timedelta
import orjson
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Initialize FastAPI app
app = FastAPI(title="WebBoost Martinique API")

# CORS configuration
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"]
)

# Database connection
MONGO_URL = os.getenv("MONGO_URL")
if not MONGO_URL:
    raise Exception("MONGO_URL environment variable is required")

client = MongoClient(MONGO_URL)
db = client.get_database()

# Pydantic models
class ContactPayload(BaseModel):
    name: str = Field(..., min_length=2, max_length=120)
    email: EmailStr
    phone: str = Field(..., min_length=6, max_length=25)
    sector: Optional[str] = Field(None, max_length=80)
    pack: Optional[Literal["Essentiel Local", "Vitrine Pro", "Vitrine Conversion"]] = None
    message: Optional[str] = Field(None, max_length=2000)
    consent: bool = Field(..., description="RGPD consent")
    source: Optional[str] = Field("contact_form", max_length=60)


class ChatMessage(BaseModel):
    role: Literal["system", "user", "assistant"]
    content: str


class ChatRequest(BaseModel):
    messages: List[ChatMessage]
    temperature: Optional[float] = 0.3


class OpenAIChatRequest(BaseModel):
    message: str
    api_key: Optional[str] = None
    model: Optional[str] = "gpt-4o-mini"


class APIKeyConfig(BaseModel):
    openai_api_key: Optional[str] = None


# Initialize emergentintegrations for LLM
try:
    from emergentintegrations.llm.chat import LlmChat, UserMessage
    EMERGENT_AVAILABLE = True
except ImportError:
    EMERGENT_AVAILABLE = False
    print("Warning: emergentintegrations not available")

# Health check endpoint
@app.get("/api/health")
async def health_check():
    try:
        # Test database connection
        server_info = client.server_info()
        return {
            "status": "healthy",
            "timestamp": datetime.now(timezone.utc).isoformat(),
            "database": "connected",
            "mongo_version": server_info.get("version", "unknown")
        }
    except Exception as e:
        raise HTTPException(status_code=503, detail=f"Database connection failed: {str(e)}")


# Contact form endpoint
@app.post("/api/contact")
async def submit_contact(payload: ContactPayload):
    try:
        contact_data = {
            "id": str(uuid.uuid4()),
            "name": payload.name,
            "email": payload.email,
            "phone": payload.phone,
            "sector": payload.sector,
            "pack": payload.pack,
            "message": payload.message,
            "consent": payload.consent,
            "source": payload.source,
            "created_at": datetime.now(timezone.utc).isoformat(),
            "status": "new"
        }
        
        result = db.contacts.insert_one(contact_data)
        
        return {
            "success": True,
            "message": "Contact submitted successfully",
            "id": contact_data["id"]
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to save contact: {str(e)}")


# Original fallback chat endpoint (keeping for compatibility)
@app.post("/api/chat")
async def chat_endpoint(request: ChatRequest):
    try:
        user_message = request.messages[-1].content if request.messages else ""
        
        # Try Emergent LLM first
        if EMERGENT_AVAILABLE:
            try:
                emergent_key = os.getenv("EMERGENT_LLM_KEY")
                if emergent_key:
                    chat = LlmChat(
                        api_key=emergent_key,
                        session_id=str(uuid.uuid4()),
                        system_message="Tu es l'assistant WebBoost Martinique. R√©ponds en fran√ßais de mani√®re professionnelle et locale."
                    ).with_model("openai", "gpt-4o-mini")
                    
                    user_msg = UserMessage(text=user_message)
                    response = await chat.send_message(user_msg)
                    
                    # Store in database
                    chat_data = {
                        "id": str(uuid.uuid4()),
                        "message": user_message,
                        "response": response,
                        "model": "gpt-4o-mini",
                        "provider": "emergent",
                        "created_at": datetime.now(timezone.utc).isoformat()
                    }
                    db.chats.insert_one(chat_data)
                    
                    return {"reply": response, "used_llm": True, "provider": "emergent"}
            except Exception as e:
                print(f"Emergent LLM failed: {e}")
        
        # Fallback responses
        fallback_responses = {
            "bonjour": "Bienvenue chez WebBoost Martinique üá≤üá∂ ! Souhaitez-vous voir les prix, comprendre le paiement 50/40/10, parler sur WhatsApp, ou calculer un d√©lai de livraison ?",
            "prix": "Nos packs : Essentiel Local (890‚Ç¨ HT), Vitrine Pro (1290‚Ç¨ HT), Vitrine Conversion (1790‚Ç¨ HT). Paiement √©chelonn√© 50/40/10 possible.",
            "paiement": "Modalit√©s 50/40/10 : 50% √† la commande, 40% avant mise en ligne, 10% √† la livraison. R√©visions incluses selon le pack choisi.",
            "d√©lai": "D√©lais selon pack : Essentiel (7-10j), Pro (7-10j), Conversion (10-12j). D√©lais d√©clench√©s √† r√©ception compl√®te de vos contenus.",
            "whatsapp": "Contactez-nous directement sur WhatsApp pour un √©change personnalis√© : https://wa.me/596000000"
        }
        
        response_text = "Je suis l'assistant WebBoost Martinique. Comment puis-je vous aider avec votre projet web ?"
        message_lower = user_message.lower()
        
        for keyword, response in fallback_responses.items():
            if keyword in message_lower:
                response_text = response
                break
        
        # Store fallback in database
        chat_data = {
            "id": str(uuid.uuid4()),
            "message": user_message,
            "response": response_text,
            "model": "fallback",
            "provider": "local",
            "created_at": datetime.now(timezone.utc).isoformat()
        }
        db.chats.insert_one(chat_data)
        
        return {"reply": response_text, "used_llm": False, "provider": "fallback"}
        
    except Exception as e:
        print(f"Chat endpoint error: {e}")
        raise HTTPException(status_code=500, detail="Chat service temporarily unavailable")


# NEW OpenAI Chat endpoint with √âLISE personality - DIRECT INTEGRATION
@app.post("/api/chat-openai")
async def openai_chat_direct(request: OpenAIChatRequest):
    """
    OpenAI Chat direct avec personnalit√© √âlise int√©gr√©e
    Pas de configuration utilisateur - Fonctionne imm√©diatement
    """
    try:
        # Cl√© OpenAI c√¥t√© serveur (fixe)
        api_key = os.getenv("OPENAI_API_KEY")
        
        if not api_key or api_key == "sk-votre-cle-openai-ici":
            # Fallback vers Emergent si pas de cl√© OpenAI
            if EMERGENT_AVAILABLE:
                emergent_key = os.getenv("EMERGENT_LLM_KEY")
                if emergent_key:
                    chat = LlmChat(
                        api_key=emergent_key,
                        session_id=str(uuid.uuid4()),
                        system_message="""Tu es √âlise Morel, conseill√®re commerciale de WebBoost Martinique. Tu es professionnelle mais chaleureuse.

PERSONNALIT√â √âLISE :
- Conseill√®re commerciale experte (3 ans d'exp√©rience)
- Connaissance parfaite du march√© martiniquais
- Approche consultative et bienveillante
- Sp√©cialiste conversion digitale TPE/PME

PACKS WEBBOOST MARTINIQUE :
- Pack Essentiel (890‚Ç¨ HT) : 3 pages, SEO base, mobile-first, 1 r√©vision, 10j
- Pack Pro (1290‚Ç¨ HT) : 5-6 pages, SEO √©tendu, LCP<2.5s, GA4, 2 r√©visions, 7-10j [LE PLUS POPULAIRE]
- Pack Premium (1790‚Ç¨ HT) : 6-8 pages + conversion, tracking avanc√©, formation 45min, 10-12j

CONTEXTE MARTINIQUE :
- 74% de la population en difficult√© num√©rique (vs 33% m√©tropole)
- D√©lais WebBoost : 7-12 jours (vs 4-8 semaines concurrence)
- Tarifs adapt√©s march√© local
- Paiement √©chelonn√© : 50% commande / 40% avant mise en ligne / 10% livraison

TON R√îLE :
1. Accueillir chaleureusement
2. D√©couvrir le secteur d'activit√© (restaurant, commerce, services, sant√©, beaut√©, artisan)
3. Comprendre les besoins et objectifs
4. Recommander le pack adapt√© avec justification
5. G√©rer les objections (prix, d√©lais, garanties)
6. Guider vers la commande ou contact Kenneson (WhatsApp urgent)

GARANTIES √Ä MENTIONNER :
- Satisfait ou rembours√© 15 jours
- D√©lai respect√© ou rembours√©
- Paiement 100% s√©curis√©
- Support 7j/7 inclus

R√©ponds naturellement en fran√ßais, pose des questions ouvertes, sois consultative. Guide subtilement vers la vente sans √™tre agressive."""
                    ).with_model("openai", "gpt-4o-mini")
                    
                    user_msg = UserMessage(text=request.message)
                    response = await chat.send_message(user_msg)
                    
                    # Store in database
                    chat_data = {
                        "id": str(uuid.uuid4()),
                        "message": request.message,
                        "response": response,
                        "model": "gpt-4o-mini",
                        "provider": "emergent_as_openai",
                        "personality": "elise",
                        "created_at": datetime.now(timezone.utc).isoformat()
                    }
                    db.chats.insert_one(chat_data)
                    
                    return {
                        "reply": response, 
                        "model": "gpt-4o-mini", 
                        "provider": "emergent",
                        "personality": "elise",
                        "success": True
                    }
            
            raise HTTPException(
                status_code=503, 
                detail="Service OpenAI temporairement indisponible. Veuillez r√©essayer."
            )
        
        # Use direct OpenAI integration
        if EMERGENT_AVAILABLE:
            try:
                chat = LlmChat(
                    api_key=api_key,
                    session_id=str(uuid.uuid4()),
                    system_message="""Tu es √âlise Morel, conseill√®re commerciale de WebBoost Martinique. Tu es professionnelle mais chaleureuse.

PERSONNALIT√â √âLISE :
- Conseill√®re commerciale experte (3 ans d'exp√©rience)
- Connaissance parfaite du march√© martiniquais
- Approche consultative et bienveillante
- Sp√©cialiste conversion digitale TPE/PME

PACKS WEBBOOST MARTINIQUE :
- Pack Essentiel (890‚Ç¨ HT) : 3 pages, SEO base, mobile-first, 1 r√©vision, 10j
- Pack Pro (1290‚Ç¨ HT) : 5-6 pages, SEO √©tendu, LCP<2.5s, GA4, 2 r√©visions, 7-10j [LE PLUS POPULAIRE]
- Pack Premium (1790‚Ç¨ HT) : 6-8 pages + conversion, tracking avanc√©, formation 45min, 10-12j

CONTEXTE MARTINIQUE :
- 74% de la population en difficult√© num√©rique (vs 33% m√©tropole)
- D√©lais WebBoost : 7-12 jours (vs 4-8 semaines concurrence)
- Tarifs adapt√©s march√© local
- Paiement √©chelonn√© : 50% commande / 40% avant mise en ligne / 10% livraison

TON R√îLE :
1. Accueillir chaleureusement (utilise des emojis avec mod√©ration)
2. D√©couvrir le secteur d'activit√© (restaurant, commerce, services, sant√©, beaut√©, artisan)
3. Comprendre les besoins et objectifs
4. Recommander le pack adapt√© avec justification claire
5. G√©rer les objections (prix, d√©lais, garanties)
6. Guider vers la commande ou contact direct

GARANTIES √Ä MENTIONNER :
- Satisfait ou rembours√© 15 jours
- D√©lai respect√© ou rembours√©
- Paiement 100% s√©curis√© Stripe
- Support 7j/7 inclus

R√©ponds naturellement en fran√ßais, sois consultative mais commerciale. Tu pousses subtilement vers la vente en mettant en avant nos avantages (rapidit√©, tarifs locaux, expertise martiniquaise)."""
                ).with_model("openai", request.model)
                
                user_msg = UserMessage(text=request.message)
                response = await chat.send_message(user_msg)
                
                # Store in database
                chat_data = {
                    "id": str(uuid.uuid4()),
                    "message": request.message,
                    "response": response,
                    "model": request.model,
                    "provider": "openai_direct",
                    "personality": "elise",
                    "created_at": datetime.now(timezone.utc).isoformat()
                }
                db.chats.insert_one(chat_data)
                
                return {
                    "reply": response, 
                    "model": request.model, 
                    "provider": "openai",
                    "personality": "elise",
                    "success": True
                }
                
            except Exception as e:
                error_msg = str(e)
                print(f"OpenAI direct error: {e}")
                
                if "api key" in error_msg.lower() or "authentication" in error_msg.lower():
                    raise HTTPException(status_code=503, detail="Configuration OpenAI en cours. R√©essayez dans quelques minutes.")
                elif "quota" in error_msg.lower() or "billing" in error_msg.lower():
                    raise HTTPException(status_code=503, detail="Service temporairement satur√©. R√©essayez dans un instant.")
                else:
                    # Fallback vers r√©ponses pr√©-programm√©es √âlise
                    fallback_response = get_elise_fallback_response(request.message)
                    return {
                        "reply": fallback_response,
                        "model": "fallback",
                        "provider": "local_elise",
                        "personality": "elise",
                        "success": True
                    }
        else:
            raise HTTPException(status_code=503, detail="Service de chat temporairement indisponible")
            
    except HTTPException:
        raise
    except Exception as e:
        print(f"OpenAI direct chat error: {e}")
        # Fallback √âlise en cas d'erreur
        fallback_response = get_elise_fallback_response(request.message)
        return {
            "reply": fallback_response,
            "model": "fallback", 
            "provider": "local_elise",
            "personality": "elise",
            "success": True
        }


def get_elise_fallback_response(message):
    """R√©ponses √âlise pr√©-programm√©es en fallback"""
    message_lower = message.lower()
    
    # Salutations
    if any(word in message_lower for word in ['bonjour', 'salut', 'hello', 'bonsoir']):
        return "Bonjour ! üòä Je suis √âlise, votre conseill√®re commerciale WebBoost Martinique. Comment puis-je vous accompagner dans votre transformation digitale aujourd'hui ?"
    
    # Prix/Tarifs
    if any(word in message_lower for word in ['prix', 'tarif', 'co√ªt', 'combien', 'budget']):
        return """Excellente question ! üí∞ Nos tarifs sont sp√©cialement adapt√©s au march√© martiniquais :

**Pack Essentiel** - 890‚Ç¨ HT
‚Ä¢ 3 pages professionnelles + SEO base
‚Ä¢ Acompte : 445‚Ç¨ seulement

**Pack Pro** - 1 290‚Ç¨ HT ‚≠ê (Le plus populaire)
‚Ä¢ 5-6 pages + SEO √©tendu + GA4
‚Ä¢ Acompte : 645‚Ç¨ seulement

**Pack Premium** - 1 790‚Ç¨ HT  
‚Ä¢ 6-8 pages + conversion + formation
‚Ä¢ Acompte : 895‚Ç¨ seulement

Paiement √©chelonn√© 50/40/10 - Quel est votre secteur d'activit√© pour mieux vous conseiller ?"""
    
    # D√©lais
    if any(word in message_lower for word in ['d√©lai', 'temps', 'rapidit√©', 'livraison']):
        return """‚ö° Notre force : la rapidit√© martiniquaise !

Contrairement √† la concurrence (6-8 semaines), nous livrons en **7 √† 12 jours ouvr√©s maximum**.

**Pourquoi si rapide ?**
‚úÖ √âquipe 100% locale (pas de d√©calage)
‚úÖ Process optimis√© depuis 3 ans
‚úÖ Communication directe

**D√©lais par pack :**
‚Ä¢ Essentiel : 10 jours max
‚Ä¢ Pro : 7-10 jours max
‚Ä¢ Premium : 10-12 jours max

Et c'est **garanti** ! D√©lai non respect√© = remboursement. Pour quel type d'entreprise est-ce ?"""
    
    # Secteurs d'activit√©
    if 'restaurant' in message_lower or 'resto' in message_lower:
        return """üçΩÔ∏è **Parfait ! Les restaurants sont ma sp√©cialit√© !**

Pour votre restaurant, je recommande fortement le **Pack Pro** (1 290‚Ç¨ HT) :
‚Ä¢ Galerie photos pour mettre vos plats en valeur
‚Ä¢ Syst√®me de r√©servation en ligne
‚Ä¢ Optimisation SEO "restaurant [votre ville]"
‚Ä¢ Acompte : seulement 645‚Ç¨

Avez-vous d√©j√† un site web actuellement ?"""
    
    if any(word in message_lower for word in ['commerce', 'boutique', 'magasin']):
        return """üõçÔ∏è **Excellent ! Le commerce local, c'est mon domaine !**

Selon votre activit√©, 2 options :

**Pack Essentiel** (890‚Ç¨ HT) - Boutique physique
‚Ä¢ Site vitrine √©l√©gant + infos pratiques
‚Ä¢ Acompte : 445‚Ç¨

**Pack Pro** (1 290‚Ç¨ HT) - Plus d'ambition  
‚Ä¢ Catalogue produits + SEO local renforc√©
‚Ä¢ Acompte : 645‚Ç¨

Que vendez-vous exactement ? Cela m'aidera √† mieux vous conseiller ! üòä"""
    
    # Urgence
    if any(word in message_lower for word in ['urgent', 'vite', 'rapidement', 'asap']):
        return """üö® **Urgence comprise !**

Pour un traitement prioritaire :
üì± **Contact direct Kenneson** : https://wa.me/596000000
‚ö° **D√©marrage imm√©diat** possible si brief complet
üéØ **Pack Pro 7 jours** garanti

Quelle est votre situation d'urgence ? (lancement imminent, concurrent...?)"""
    
    # Garanties/S√©curit√©
    if any(word in message_lower for word in ['garantie', 's√©curis√©', 'rembours√©', 'risque']):
        return """üõ°Ô∏è **S√©curit√© totale avec WebBoost !**

Mes garanties personnelles :
‚úÖ **Satisfait ou rembours√©** - 15 jours complets
‚úÖ **D√©lai respect√© ou rembours√©** - Engagement ferme  
‚úÖ **Paiement s√©curis√©** - Stripe certifi√©
‚úÖ **Support 7j/7** pendant votre projet
‚úÖ **0% remboursement** demand√© en 3 ans !

Quel aspect vous pr√©occupe le plus ?"""
    
    # G√©n√©ral/D√©couverte
    return """üòä **Merci de votre int√©r√™t pour WebBoost !**

Je suis √âlise, sp√©cialis√©e dans l'accompagnement des entreprises martiniquaises pour leur transformation digitale.

Pour mieux vous conseiller :
‚Ä¢ Quel est votre secteur d'activit√© ?
‚Ä¢ Avez-vous un site actuellement ?  
‚Ä¢ Quel est votre objectif principal ?

Mon r√¥le : vous trouver LA solution parfaite ! üéØ"""


# API Key configuration endpoint
@app.post("/api/config/openai-key")
async def configure_openai_key(config: APIKeyConfig):
    """
    Endpoint to test and configure OpenAI API key
    """
    if not config.openai_api_key:
        raise HTTPException(status_code=400, detail="Cl√© API OpenAI requise")
    
    try:
        # Test the API key with a simple request
        if EMERGENT_AVAILABLE:
            chat = LlmChat(
                api_key=config.openai_api_key,
                session_id=str(uuid.uuid4()),
                system_message="R√©ponds juste 'Test r√©ussi' en fran√ßais."
            ).with_model("openai", "gpt-4o-mini")
            
            user_msg = UserMessage(text="Test")
            response = await chat.send_message(user_msg)
            
            return {
                "success": True,
                "message": "Cl√© API OpenAI valid√©e avec succ√®s",
                "test_response": response
            }
        else:
            raise HTTPException(status_code=503, detail="Service de validation non disponible")
            
    except Exception as e:
        error_msg = str(e)
        if "api key" in error_msg.lower() or "authentication" in error_msg.lower():
            raise HTTPException(status_code=401, detail="Cl√© API OpenAI invalide")
        else:
            raise HTTPException(status_code=500, detail=f"Erreur de validation: {error_msg}")


# KPI endpoint
@app.get("/api/kpi")
async def get_kpi():
    try:
        total_contacts = db.contacts.count_documents({})
        total_chats = db.chats.count_documents({})
        
        # Recent activity (last 7 days)
        recent_contacts = db.contacts.count_documents({
            "created_at": {"$gte": (datetime.now(timezone.utc) - timedelta(days=7)).isoformat()}
        })
        
        return {
            "total_leads": total_contacts,
            "total_chats": total_chats,
            "recent_leads": recent_contacts,
            "timestamp": datetime.now(timezone.utc).isoformat()
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to fetch KPI: {str(e)}")


# Get available OpenAI models
@app.get("/api/models/openai")
async def get_openai_models():
    """
    Return available OpenAI models
    """
    return {
        "models": [
            {"id": "gpt-4o-mini", "name": "GPT-4o Mini", "description": "Rapide et √©conomique"},
            {"id": "gpt-4o", "name": "GPT-4o", "description": "Mod√®le principal d'OpenAI"},
            {"id": "gpt-4", "name": "GPT-4", "description": "Mod√®le GPT-4 standard"},
            {"id": "gpt-5", "name": "GPT-5", "description": "Dernier mod√®le OpenAI (si disponible)"}
        ],
        "default": "gpt-4o-mini"
    }


if __name__ == "__main__":
    import uvicorn
    uvicorn.run("server:app", host="0.0.0.0", port=8001, reload=True)